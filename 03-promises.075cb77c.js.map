{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,MAAOF,SAASC,cAAc,uBAC9BE,KAAMH,SAASC,cAAc,sBAC7BG,OAAQJ,SAASC,cAAc,yBAoBjC,SAASI,GAAcC,SAAEA,EAAQC,SAAEA,IACjC,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,IAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAAEN,E,SAAUC,IAEpBM,EAAO,C,SAAEP,E,SAAUC,GAAW,GAE/BA,I,CAGP,SAASQ,GAAST,SAAEA,EAAQC,SAAEA,IAC5BX,EAAAoB,OAAOC,QAAQ,uBAAqBX,QAAiBC,M,CAGvD,SAASW,GAAQZ,SAAEA,EAAQC,SAAEA,IAC3BX,EAAAoB,OAAOG,QAAQ,sBAAoBb,QAAiBC,M,CAlCtDT,EAAKC,KAAKqB,iBAAiB,UAE3B,SAAkBC,GAChBA,EAAMC,iBACN,IAAIf,EAAWgB,OAAOzB,EAAKI,MAAMsB,OACjC,MAAMC,EAAUF,OAAOzB,EAAKK,KAAKqB,OAC3BE,EAAYH,OAAOzB,EAAKM,OAAOoB,OAErC,IAAK,IAAIlB,EAAW,EAAGA,GAAYoB,EAAWpB,GAAY,EACxDC,GAAyB,IAAbD,EAAiB,EAAImB,EACjCpB,EAAc,C,SAAEC,E,SAAUC,IAEvBoB,KAAKZ,GACLa,MAAMV,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  delay: document.querySelector('input[name=\"delay\"]'),\n  step: document.querySelector('input[name=\"step\"]'),\n  amount: document.querySelector('input[name=\"amount\"]'),\n};\n\nrefs.form.addEventListener('submit', onSumbit);\n\nfunction onSumbit(event) {\n  event.preventDefault();\n  let delayVal = Number(refs.delay.value);\n  const stepVal = Number(refs.step.value);\n  const amountVal = Number(refs.amount.value);\n  \n  for (let position = 1; position <= amountVal; position += 1){\n    delayVal += position === 1 ? 0 : stepVal;\n    createPromise({ position, delayVal })\n     \n      .then(onSucces)\n      .catch(onError);\n   }\n}\n\nfunction createPromise({ position, delayVal }) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) =>\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delayVal });\n      } else {\n        reject({ position, delayVal })\n      }\n    }, delayVal)\n  )};\n\nfunction onSucces({ position, delayVal }) {\n  Notify.success(`✅ Fulfilled promise ${position} in ${delayVal}ms`);\n}\n\nfunction onError({ position, delayVal }) {\n  Notify.failure(`❌ Rejected promise ${position} in ${delayVal}ms`);\n}\n// Проміс створюється як екземпляр класу Promise, який приймає функцію (executor) як аргумент і відразу викликає її, ще до створення і повернення промісу.\n// resolve(value) - функція для виклику у разі успішної операції. Переданий їй аргумент буде значенням виконаного промісу.\n// reject(error) - функція для виклику у разі помилки. Переданий їй аргумент буде значенням відхиленого промісу\n\n//  event.preventDefault(); відміна дій браузера по замовчувані . наприклад при самбіті має бути перехід на інщу сторінку то його не буде\n\n// function createPromise({ position, delayVal }) {-------- це функція яка приймаєдва параметра { position, delayVal } це обєкт тобто їхні значення\n//   const shouldResolve = Math.random() > 0.3; --------- вибираєрандомне рандомне число > 0.3\n  // return new Promise((resolve, reject) => -----сторюємо проміс (обіцянку ) де (resolve) функція для виклику у разі успішної операції , reject(error) - функція для виклику у разі помилки.\n//     setTimeout(() => {   ------------- викликає метод отложиног таймаютя\n//       if (shouldResolve) {------ якщо рандомне число більше 0.3 то це правда \n//         resolve({ position, delayVal });----- і виконується функція успішної операції\n//       } else {\n//         reject({ position, delayVal })------ в іншому випадку виконується функції виклику у разі помилки\n//       }\n//     }, delayVal)=------------ кількість секунд в методі setTimeout час черзе який буде виконуватися функція setTimeout\n//   )};\n\n// function onSucces({ position, delayVal }) {  ------- функція яка передає два параметра \n//   Notify.success(`✅ Fulfilled promise ${position} in ${delayVal}ms`);}--- бібліотека резкльтат\n\n// refs.form.addEventListener('submit', onSumbit);------- обробник події при отпраки форми \n\n// function onSumbit(event) {\n//   event.preventDefault();-------- відміна дії брацзера зазамовчуванням тобто перезагрузка \n//   let delayVal = Number(refs.delay.value);-----передає значення вписаних в импутнах приклад (1000)\n//   const stepVal = Number(refs.step.value);-----передає значення вписаних в импутнах приклад (500)\n//   const amountVal = Number(refs.amount.value);-----передає значення вписаних в импутнах приклад (4)\n  \n//   for (let position = 1; position <= amountVal; position += 1){--тут ми перебираємо і визначаємо position \n//     delayVal += position === 1 ? 0 : stepVal; ----буде додавати на кожній ітерації stepVal но пропускатиме першу ітераціюдодавання \n//     createPromise({ position, delayVal })----передаємо position і delayVal якшо amountVal=4 , то значить шо бупершаде 4 ітерації delayVal=1000 а const stepVal=500 то ,\n\n     \n//       .then(onSucces)\n//       .catch(onError);\n//    }\n// }\n\n// На практиці в методі then() обробляють тільки успішне виконання промісу, а помилку його виконання у спеціальному методі catch() для «відловлювання» помилок.\n// Після створення промісу, його результат обробляється в callback-функції. Код пишеться таким чином, ніби ми думаємо про те, що може статися, якщо проміс виконається або не виконається, не думаючи про часові рамки.\n\n// Метод then() приймає два аргументи - callback-функції, які будуть викликані, коли проміс змінить свій стан. Результат промісу, значення або помилку, вони отримають як аргументи."],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$refs","form","document","querySelector","delay","step","amount","$47d4ff9957288465$var$createPromise","position","delayVal","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","$47d4ff9957288465$var$onSucces","Notify","success","$47d4ff9957288465$var$onError","failure","addEventListener","event","preventDefault","Number","value","stepVal","amountVal","then","catch"],"version":3,"file":"03-promises.075cb77c.js.map"}